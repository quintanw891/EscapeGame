package EscapeGame;

import java.awt.*;

public class Level {
	//declare items that are present in all levels: start and goal position
	public int startx, starty, goalx, goaly, goalw, goalh;
	//declare items that come in sets of varying size
	public Rectangle[] walls;
	public Guard[] guards;
	//The level constructor takes an int num which represents which level is to be created
	public Level(int num){
		if(num == 1){//CREATE LEVEL 1
			startx = 20;
			starty = Client.h-69;
			goalx = 300;
			goaly = 0;
			goalw = 100;
			goalh = 50;
			walls = new Rectangle[5];
			walls[0] = new Rectangle(0, 250, 300, 50);
			walls[1] = new Rectangle(250, 100, 50, 100);
			walls[2] = new Rectangle(400, 0, 200, 400);
			walls[3] = new Rectangle(0, 0, 150, 300);
			walls[4] = new Rectangle(150, 0, 150, 50);
			guards = new Guard[1];
			guards[0] = new Guard(4);
			guards[0].setBounds(200, 60, 20, 20);
			guards[0].path[0] = new Point(200, 60);
			guards[0].path[1] = new Point(350, 60);
			guards[0].path[2] = new Point(350, 210);
			guards[0].path[3] = new Point(200, 210);
		}else if(num == 2){//CREATE LEVEL 2
			startx = 25;
			starty = Client.h-65;
			goalx = 540;
			goaly = 350;
			goalw = 70;
			goalh = 50;
			walls = new Rectangle[12];
			walls[0] = new Rectangle(300, 0, 20, 330);
			walls[1] = new Rectangle(80, 240, 20, 180);
			walls[2] = new Rectangle(80, 60, 20, 150);
			walls[3] = new Rectangle(80, 50, 140, 20);
			walls[4] = new Rectangle(200, 50, 20, 40);
			walls[5] = new Rectangle(200, 130, 20, 200);
			walls[6] = new Rectangle(400, 215, 20, 115);
			walls[7] = new Rectangle(400, 110, 20, 65);
			walls[8] = new Rectangle(400, 50, 140, 20);
			walls[9] = new Rectangle(520, 110, 20, 65);
			walls[10] = new Rectangle(520, 215, 20, 65);
			walls[11] = new Rectangle(520, 310, 20, 80);
			guards = new Guard[2];
			guards[0] = new Guard(2);
			guards[0].setBounds(140, 350, 20, 20);
			guards[0].path[0] = new Point(140, 350);
			guards[0].path[1] = new Point(140, 70);
			guards[1] = new Guard(2);
			guards[1].setBounds(460, 70, 20, 20);
			guards[1].path[0] = new Point(460, 350);
			guards[1].path[1] = new Point(460, 70);
		}else if(num == 3){//CREATE LEVEL 3
			startx = 25;
			starty = 25;
			goalx = 570;
			goaly = 200;
			goalw = 30;
			goalh = 80;
			walls = new Rectangle[18];
			walls[0] = new Rectangle(80, 0, 20, 300);
			walls[1] = new Rectangle(140, 280, 80, 20);
			walls[2] = new Rectangle(100, 220, 80, 20);
			walls[3] = new Rectangle(140, 160, 80, 20);
			walls[4] = new Rectangle(100, 100, 80, 20);
			walls[5] = new Rectangle(140, 40, 80, 20);
			walls[6] = new Rectangle(220, 40, 20, 300);
			walls[7] = new Rectangle(280, 150, 40, 40);
			walls[8] = new Rectangle(360, 0, 20, 270);
			walls[9] = new Rectangle(240, 320, 260, 20);
			walls[10] = new Rectangle(380, 250, 80, 20);
			walls[11] = new Rectangle(420, 190, 80, 20);
			walls[12] = new Rectangle(380, 130, 80, 20);
			walls[13] = new Rectangle(420, 70, 80, 20);
			walls[14] = new Rectangle(500, 40, 20, 300);
			walls[15] = new Rectangle(570, 0, 30, 200);
			walls[16] = new Rectangle(570, 280, 30, 120);
			walls[17] = new Rectangle(80, 340, 100, 40);
			guards = new Guard[4];
			//path points to be shared by each guard
			Point p0 = new Point(110, 310);
			Point p1 = new Point(110, 250);
			Point p2 = new Point(190, 250);
			Point p3 = new Point(190, 190);
			Point p4 = new Point(110, 190);
			Point p5 = new Point(110, 130);
			Point p6 = new Point(190, 130);
			Point p7 = new Point(190, 70);
			Point p8 = new Point(110, 70);
			Point p9 = new Point(110, 10);
			Point p10 = new Point(250, 10);
			Point p11 = new Point(250, 290);
			Point p12 = new Point(470, 290);
			Point p13 = new Point(470, 220);
			Point p14 = new Point(390, 220);
			Point p15 = new Point(390, 160);
			Point p16 = new Point(470, 160);
			Point p17 = new Point(470, 100);
			Point p18 = new Point(390, 100);
			Point p19 = new Point(390, 10);
			Point p20 = new Point(530, 10);
			Point p21 = new Point(530, 240);
			Point p22 = new Point(530, 350);
			Point p23 = new Point(190, 350);
			Point p24 = new Point(190, 310);
			//total length of this path: 2700
			//distance between guards (along the path): 675
			guards[0] = new Guard(25);
			guards[0].setBounds(110, 310, 20, 20);
			guards[0].path[0] = p0;
			guards[0].path[1] = p1;
			guards[0].path[2] = p2;
			guards[0].path[3] = p3;
			guards[0].path[4] = p4;
			guards[0].path[5] = p5;
			guards[0].path[6] = p6;
			guards[0].path[7] = p7;
			guards[0].path[8] = p8;
			guards[0].path[9] = p9;
			guards[0].path[10] = p10;
			guards[0].path[11] = p11;
			guards[0].path[12] = p12;
			guards[0].path[13] = p13;
			guards[0].path[14] = p14;
			guards[0].path[15] = p15;
			guards[0].path[16] = p16;
			guards[0].path[17] = p17;
			guards[0].path[18] = p18;
			guards[0].path[19] = p19;
			guards[0].path[20] = p20;
			guards[0].path[21] = p21;
			guards[0].path[22] = p22;
			guards[0].path[23] = p23;
			guards[0].path[24] = p24;
			guards[1] = new Guard(25);
			guards[1].setBounds(185, 10, 20, 20);
			guards[1].path[0] = p9;
			guards[1].path[1] = p10;
			guards[1].path[2] = p11;
			guards[1].path[3] = p12;
			guards[1].path[4] = p13;
			guards[1].path[5] = p14;
			guards[1].path[6] = p15;
			guards[1].path[7] = p16;
			guards[1].path[8] = p17;
			guards[1].path[9] = p18;
			guards[1].path[10] = p19;
			guards[1].path[11] = p20;
			guards[1].path[12] = p21;
			guards[1].path[13] = p22;
			guards[1].path[14] = p23;
			guards[1].path[15] = p24;
			guards[1].path[16] = p0;
			guards[1].path[17] = p1;
			guards[1].path[18] = p2;
			guards[1].path[19] = p3;
			guards[1].path[20] = p4;
			guards[1].path[21] = p5;
			guards[1].path[22] = p6;
			guards[1].path[23] = p7;
			guards[1].path[24] = p8;
			guards[2] = new Guard(25);
			guards[2].setBounds(430, 220, 20, 20);
			guards[2].path[0] = p14;
			guards[2].path[1] = p15;
			guards[2].path[2] = p16;
			guards[2].path[3] = p17;
			guards[2].path[4] = p18;
			guards[2].path[5] = p19;
			guards[2].path[6] = p20;
			guards[2].path[7] = p21;
			guards[2].path[8] = p22;
			guards[2].path[9] = p23;
			guards[2].path[10] = p24;
			guards[2].path[11] = p0;
			guards[2].path[12] = p1;
			guards[2].path[13] = p2;
			guards[2].path[14] = p3;
			guards[2].path[15] = p4;
			guards[2].path[16] = p5;
			guards[2].path[17] = p6;
			guards[2].path[18] = p7;
			guards[2].path[19] = p8;
			guards[2].path[20] = p9;
			guards[2].path[21] = p10;
			guards[2].path[22] = p11;
			guards[2].path[23] = p12;
			guards[2].path[24] = p13;
			guards[3] = new Guard(25);
			guards[3].setBounds(530, 135, 20, 20);
			guards[3].path[0] = p21;
			guards[3].path[1] = p22;
			guards[3].path[2] = p23;
			guards[3].path[3] = p24;
			guards[3].path[4] = p0;
			guards[3].path[5] = p1;
			guards[3].path[6] = p2;
			guards[3].path[7] = p3;
			guards[3].path[8] = p4;
			guards[3].path[9] = p5;
			guards[3].path[10] = p6;
			guards[3].path[11] = p7;
			guards[3].path[12] = p8;
			guards[3].path[13] = p9;
			guards[3].path[14] = p10;
			guards[3].path[15] = p11;
			guards[3].path[16] = p12;
			guards[3].path[17] = p13;
			guards[3].path[18] = p14;
			guards[3].path[19] = p15;
			guards[3].path[20] = p16;
			guards[3].path[21] = p17;
			guards[3].path[22] = p18;
			guards[3].path[23] = p19;
			guards[3].path[24] = p20;
		}
	}
}
